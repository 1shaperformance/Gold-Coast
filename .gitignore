 de
com.google.api.ads.dfp.lib.client.AdManagerServiceClient.soapXmlLogger



import java.io.BufferedReader;
...

ReportDownloadOptions options = new ReportDownloadOptions();
options.setExportFormat(exportFormat);
options.setUseGzipCompression(true);

BufferedReader contentsReader = null;
try {
  contentsReader = reportDownloader.getReportAsCharSource(options)
      .openBufferedStream();

  String line;
  while ((line = contentsReader.readLine()) != null) {
    // Process a single line of report contents...
  }
} finally {
  if (contentsReader != null) {
    contentsReader.close();
  }
}demtarget/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
# https://github.com/takari/maven-wrapper#usage-without-binary-jar
.mvn/wrapper/maven-wrapper.jar

# Eclipse m2e generated files
# Eclipse Core
.project
# JDT-specific (Eclipse Java Development Tools)
.classpath

flutterfire configure --project=gold-mode-410402

import 'package:firebase_corefirebase_core.dart';
import 'firebase_options.dart';



flutterfire configure --project=gold-mode-410402

dependencies {
    // Import the BoM for the Firebase platform
    implementation(platform("com.google.firebase:firebase-bom:32.7.1"))

    // Add the dependency for the Firebase Authentication library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-auth")
}
dependencies {
    // Add the dependency for the Firebase Authentication library
    // When NOT using the BoM, you must specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-auth:22.3.1")
}
dependencies {
  // ...

  // Import the Firebase BoM
  implementation(platform("com.google.firebase:firebase-bom:32.7.1"))

  // Using KTX libraries for Authentication and Cloud Firestore
  implementation("com.google.firebase:firebase-auth-ktx")
  implementation("com.google.firebase:firebase-firestore-ktx")
}
dependencies {
  // ...

  // Import the Firebase BoM as usual
  // Make sure to use Firebase BoM v32.5.0 or higher
  implementation(platform("com.google.firebase:firebase-bom:32.7.1"))

  // No need to use the KTX libraries, everything is now in the main module
  implementation("com.google.firebase:firebase-auth")
  implementation("com.google.firebase:firebase-firestore") 
} 

       </ignoreVersions> 
      </rule> 
 
 
     <!-- Apache Beam versions past 2.3.0 cause dataflow/spanner errors. --> 
     <rule groupId="org.apache.beam" artifactId="beam-sdks-java-core" comparisonMethod="maven"> 
       <ignoreVersions> 
         <ignoreVersion type="regex">.*</ignoreVersion> 
       </ignoreVersions> 
     </rule> 
  
      <!-- SendGrid 3 libraries are broken in App Engine standard environment --> 
      <rule groupId="com.sendgrid" artifactId="sendgrid-java" comparisonMethod="maven"> 
        <ignoreVersions>
pip install Flask==3.0.2
$ pip install -U Flask
# save this as app.py
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello, World!"


name: Android CI

on:
  - pull_request
  - push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Check Snippets
      run: python scripts/checksnippets.py
    - name: Install NDK
      run: echo "y" | sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install "ndk;21.0.6113669" --sdk_root=${ANDROID_SDK_ROOT}
    - name: Build with Gradle (Pull Request)
      run: ./build_pull_request.sh
      if: github.event_name == 'pull_request'
    - name: Build with Gradle (Push)
      run: ./gradlew clean ktlint build
      if: github.event_name != 'pull_request'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <application
            android:allowBackup="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/app_name"
            android:supportsRtl="true"
            android:theme="@style/AppTheme">
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>

                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <activity android:name=".kotlin.MainActivity"/>
    </application>

</manifest>

         }); 
          // [END count_aggregate_query] 
      } 
  
     public void orQuery() { 
         CollectionReference collection = db.collection("cities"); 
         // [START or_queries] 
         Query query = collection.where(Filter.and( 
             Filter.equalTo("state", "CA"), 
             Filter.or( 
                 Filter.equalTo("capital", true), 
                 Filter.greaterThanOrEqualTo("population", 1000000) 
             ) 
         )); 
         // [END or_queries] 
     } 
  
     public void orQueryDisjunctions() { 
         CollectionReference collection = db.collection("cities"); 
  
         // [START one_disjunction] 
         collection.whereEqualTo("a", 1); 
         // [END one_disjunction] 
  
         // [START two_disjunctions] 
         collection.where(Filter.or( 
             Filter.equalTo("a", 1), 
             Filter.equalTo("b", 2) 
         )); 
         // [END two_disjunctions] 
  
         // [START four_disjunctions] 
         collection.where(Filter.or( 
             Filter.and( 
                 Filter.equalTo("a", 1), 
                 Filter.equalTo("c", 3) 
             ), 
             Filter.and( 
                 Filter.equalTo("a", 1), 
                 Filter.equalTo("d", 4) 
             ), 
             Filter.and( 
                 Filter.equalTo("b", 2), 
                 Filter.equalTo("c", 3) 
             ), 
             Filter.and( 
                 Filter.equalTo("b", 2), 
                 Filter.equalTo("d", 4) 
             ) 
         )); 
         // [END four_disjunctions] 
  
         // [START four_disjunctions_compact] 
         collection.where(Filter.and( 
             Filter.or( 
                 Filter.equalTo("a", 1), 
                 Filter.equalTo("b", 2) 
             ), 
             Filter.or( 
                 Filter.equalTo("c", 3), 
                 Filter.equalTo("d", 4) 
             ) 
         )); 
         // [END four_disjunctions_compact] 
  
         // [START 20_disjunctions] 
         collection.where(Filter.or( 
             Filter.inArray("a", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 
             Filter.inArray("b", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 
         )); 
         // [END 20_disjunctions] 
  
         // [START 10_disjunctions] 
         collection.where(Filter.and( 
             Filter.inArray("a", Arrays.asList(1, 2, 3, 4, 5)), 
             Filter.or( 
                 Filter.equalTo("b", 2), 
                 Filter.equalTo("c", 3) 
             ) 
         )); 
         // [END 10_disjunctions] 
     } 
  
     public void illegalDisjunctions() { 
         // [START 50_disjunctions] 
         collection.where(Filter.and( 
             Filter.inArray("a", Arrays.asList(1, 2, 3, 4, 5)), 
             Filter.inArray("b", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 
         )); 
         // [END 50_disjunctions]
     }


<!-- Global tag (gtag.js) -->

Das Ende ist:

</script>

# Get `depot_tools` in $PATH if you don't have it
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $HOME/src/depot_tools
export PATH="$PATH:$HOME/src/depot_tools"

# Check out the recipe engine repo
git clone https://chromium.googlesource.com/infra/luci/recipes-py $HOME/src/recipes-py

# make your change
cd $HOME/src/recipes-py
git new-branch cool_feature
# hack hack
git commit -a -m "This is awesome"

# This will ask for your Google Account credentials.
git cl upload -s -r joe@example.com
# Wait for approval over email.
# Click "Submit to CQ" button or ask reviewer to do it for you.
# Wait for the change to be tested and landed automatically.

# Contributing

We'd love for you to contribute to our source code and to make it even better than it is today! Here are the guidelines we'd like you to follow:

 - [Code of Conduct](#coc)
 - [Question or Problem?](#question)
 - [Issues and Bugs](#issue)
 - [Submission Guidelines](#submit)
 - [Coding Rules](#rules)
 - [Signing the CLA](#cla)

## <a name="coc"></a> Code of Conduct

As contributors and maintainers of the project, we pledge to respect everyone who contributes by posting issues, updating documentation, submitting pull requests, providing feedback in comments, and any other activities.

Communication through any of Firebase's channels (GitHub, StackOverflow, Google+, Twitter, etc.) must be constructive and never resort to personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.

We promise to extend courtesy and respect to everyone involved in this project regardless of gender, gender identity, sexual orientation, disability, age, race, ethnicity, religion, or level of experience. We expect anyone contributing to the project to do the same.

If any member of the community violates this code of conduct, the maintainers of the project may take action, removing issues, comments, and PRs or blocking accounts as deemed appropriate.

If you are subject to or witness unacceptable behavior, or have any other concerns, please drop us a line at nivco@google.com.

## <a name="question"></a> Got a Question or Problem?

If you have questions about how to use the project, please direct these to [StackOverflow][stackoverflow] and use the `firebase` tag. We are also available on GitHub issues.

If you feel that we're missing an important bit of documentation, feel free to
file an issue so we can help. Here's an example to get you started:

```
What are you trying to do or find out more about?

Where have you looked?

Where did you expect to find this information?
```

## <a name="issue"></a> Found an Issue?

If you find a bug in the source code or a mistake in the documentation, you can help us by
submitting an issue on this repository. Even better you can submit a Pull Request
with a fix.

See [below](#submit) for some guidelines.

## <a name="submit"></a> Submission Guidelines

### Submitting an Issue

Before you submit your issue search the archive, maybe your question was already answered.

If your issue appears to be a bug, and hasn't been reported, open a new issue.
Help us to maximize the effort we can spend fixing issues and adding new
features, by not reporting duplicate issues.  Providing the following information will increase the
chances of your issue being dealt with quickly:

* **Overview of the Issue** - if an error is being thrown a non-minified stack trace helps
* **Motivation for or Use Case** - explain why this is a bug for you
* **Browsers and Operating System** - is this a problem with all browsers or only IE9?
* **Reproduce the Error** - provide a live example or an unambiguous set of steps.
* **Related Issues** - has a similar issue been reported before?
* **Suggest a Fix** - if you can't fix the bug yourself, perhaps you can point to what might be
  causing the problem (line of code or commit)

**If you get help, help others. Good karma rulez!**

Here's a template to get you started:

```
System information (OS, Device, etc):

What steps will reproduce the problem:
1.
2.
3.

What is the expected result?

What happens instead of that?

Code, logs, or screenshot that illustrate the problem:
```

### Submitting a Pull Request
Before you submit your pull request consider the following guidelines:

* Search for an open or closed Pull Request
  that relates to your submission. You don't want to duplicate effort.
* Please sign our [Contributor License Agreement (CLA)](#cla) before
  sending pull requests. We cannot accept code without this.
* Make your changes in a new git branch:

     ```shell
     git checkout -b my-fix-branch master
     ```

* Create your patch, **including appropriate test cases**.
* Follow our [Coding Rules](#rules).
* Commit your changes using a descriptive commit message.

     ```shell
     git commit -a
     ```
  Note: the optional commit `-a` command line option will automatically "add" and "rm" edited files.

* Build your changes locally to ensure all the tests pass:

    ```shell
   gulp
    ```

* Push your branch to GitHub:

    ```shell
    git push origin my-fix-branch
    ```

* In GitHub, send a pull request to `master`.
* If we suggest changes then:
  * Make the required updates.
  * Rebase your branch and force push to your GitHub repository (this will update your Pull Request):

    ```shell
    git rebase master -i
    git push origin my-fix-branch -f
    ```

That's it! Thank you for your contribution!

#### After your pull request is merged

After your pull request is merged, you can safely delete your branch and pull the changes
from the main (upstream) repository:

* Delete the remote branch on GitHub either through the GitHub UI or your local shell as follows:

    ```shell
    git push origin --delete my-fix-branch
    ```

* Check out the master branch:

    ```shell
    git checkout master -f
    ```

* Delete the local branch:

    ```shell
    git branch -D my-fix-branch
    ```

* Update your master with the latest upstream version:

    ```shell
    git pull --ff upstream master
    ```

## <a name="rules"></a> Coding Rules

We generally follow [Google's style guides][style-guide].

## <a name="cla"></a> Signing the CLA

Please sign our [Contributor License Agreement][google-cla] (CLA) before sending pull requests. For any code
changes to be accepted, the CLA must be signed. It's a quick process, we promise!

*This guide was inspired by the [AngularJS contribution guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md).*

[google-cla]: https://cla.developers.google.com
[style-guide]: http://google.github.io/styleguide/
[stackoverflow]: http://stackoverflow.com/questions/tagged/firebase 

#!/usr/bin/env node
import fs from "fs-extra";
import yargs from "yargs/yargs";
import { hideBin } from "yargs/helpers";
import { RewritingStream } from 'parse5-html-rewriting-stream';
import ss from "stream-string";

const snippetHolder = [`<iframe hidden name=htmz onload="setTimeout(()=>document.querySelector(contentWindow.location.hash||null)?.replaceWith(...contentDocument.body.childNodes))"></iframe>`];

const args = yargs(hideBin(process.argv))
  .scriptName("npx htmzify")
  .example("npx htmzify src/index.html")
  .command("$0 <path>", "Installs htmz into an HTML file", (yargs) => yargs
    .positional("path", {
      type: "string",
      desc: "Path to the HTML file"
    })
    .option("nobak", {
      type: "boolean",
      desc: "Do not make a backup copy"
    })
  )
  .parse()

const filePath = args.path;

let cancel = false;
let prevIndent = "";
let prevPrevIndent = "";
const rewriter = new RewritingStream();

rewriter.on("startTag", (startTag) => {
  if (startTag.tagName === "iframe" && startTag.attrs.find(attr => attr.name === "name" && attr.value === "htmz")) {
    cancel = true;
    rewriter.stop();
  }
  rewriter.emitStartTag(startTag);
});

rewriter.on("text", (_, text) => {
  const indents = [...text.matchAll(/[\n\r](\s*)/g)];
  if (indents.length > 0) {
    prevPrevIndent = prevIndent;
    prevIndent = indents[indents.length - 1][1];
  }
  rewriter.emitRaw(text);
});

rewriter.on("endTag", (endTag) => {
  if (snippetHolder.length && (endTag.tagName === "html" || endTag.tagName === "body")) {
    rewriter.emitRaw(formatSnippet(snippetHolder.pop()));
  }
  rewriter.emitEndTag(endTag);
});

function formatSnippet(snippet) {
  return prevPrevIndent.slice(prevIndent.length) + snippet + "\n" + prevIndent;
}

const readStream = fs.createReadStream(filePath, { encoding: "utf-8" });
let transformed = await ss(readStream.pipe(rewriter));

if (cancel) process.exit(0);

if (snippetHolder.length) {
  transformed += formatSnippet(snippetHolder.pop());
}

if (!args.nobak) fs.moveSync(filePath, filePath + ".bak", { overwrite: true });
fs.writeFileSync(filePath, transformed);

{
  "name": "htmz",
  "version": "1.0.2",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "htmz",
      "version": "1.0.2",
      "dependencies": {
        "fs-extra": "^11.2.0",
        "parse5-html-rewriting-stream": "^7.0.0",
        "stream-string": "^2.0.4",
        "yargs": "^17.7.2"
      },
      "bin": {
        "htmz": "index.js",
        "htmzify": "index.js"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/entities": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.2.tgz",
      "integrity": "sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/fs-extra": {
      "version": "11.2.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.2.0.tgz",
      "integrity": "sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/parse5": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.1.2.tgz",
      "integrity": "sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==",
      "dependencies": {
        "entities": "^4.4.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parse5-html-rewriting-stream": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/parse5-html-rewriting-stream/-/parse5-html-rewriting-stream-7.0.0.tgz",
      "integrity": "sha512-mazCyGWkmCRWDI15Zp+UiCqMp/0dgEmkZRvhlsqqKYr4SsVm/TvnSpD9fCvqCA2zoWJcfRym846ejWBBHRiYEg==",
      "dependencies": {
        "entities": "^4.3.0",
        "parse5": "^7.0.0",
        "parse5-sax-parser": "^7.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parse5-sax-parser": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/parse5-sax-parser/-/parse5-sax-parser-7.0.0.tgz",
      "integrity": "sha512-5A+v2SNsq8T6/mG3ahcz8ZtQ0OUFTatxPbeidoMB7tkJSGDY3tdfl4MHovtLQHkEn5CGxijNWRQHhRQ6IRpXKg==",
      "dependencies": {
        "parse5": "^7.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stream-string": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/stream-string/-/stream-string-2.0.4.tgz",
      "integrity": "sha512-5s9qfQmrgEMxBTmFgYQZI+5yhorrOjBUJGnkOXUXmxiNmtfhlOwFp+YNCf7Tsu+i2eHWYaDRVb9MvCPwSdBkqw=="
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "engines": {
        "node": ">=12"
      }
    }
  }
}

{
  "name": "htmz",
  "version": "1.0.2",
  "type": "module",
  "bin": {
    "htmz": "index.js",
    "htmzify": "index.js"
  },
  "dependencies": {
    "fs-extra": "^11.2.0",
    "parse5-html-rewriting-stream": "^7.0.0",
    "stream-string": "^2.0.4",
    "yargs": "^17.7.2"
  }
}

// The credential object is thread-safe.
Credential credential = //...;

// The session object is not thread-safe.
AdManagerSession session = new AdManagerSession.Builder() // Builders are not thread-safe.
    .fromFile()
    .withOAuth2Credential(credential) // Uses thread-safe credential
    .build(); // /build() returns a brand new object every time.

// Threadsafe and lightweight.
AdManagerServices adManagerServices = new AdManagerServices();

// The Service “stubs” are NOT thread-safe.
// Stubs retain a reference to the session they are constructed for and will see any
// changes made to the session within the same thread. When used in multiple threads it
// is possible to see the object in an inconsistent state, causing bugs.
CreativeServiceInterface creativeService =
    adManagerServices.get(session, CreativeServiceInterface.class);

CreativeAsset creativeAsset = new CreativeAsset();
// Utilities such as Media are usually static and therefore thread-safe.
creativeAsset.setAssetByteArray(Media.getMediaDataFromUrl("https://goo.gl/3b9Wfh"));

// ReportDownloader retains a reference to the session and is not thread-safe.
ReportDownloader reportDownloader =
    new ReportDownloader(reportService, reportJob.getId());
Service stubs
Service stubs are the objects used to invoke webservice calls. CompanyService is one example for Ad Manager. These objects are not thread-safe and should have unique objects used per thread.

Service locators
Each product has a Services object such as AdManagerServices. These objects are thread-safe and can be re-used across threads. However, as mentioned above, the Service stubs returned by these classes are not.

Note that when you request a service stub from a service locator, you provide the session that will be used to make requests. If you make changes to the session, they will be used for all successive API calls.

Sessions
AdManagerSession holds information such as credentials and options used when making requests. These objects are not thread-safe. It is possible to make writes to this object which might let other threads view this object in an inconsistent state.

OAuth2
The Credential object is thread-safe. Therefore, you can reuse the same credential object for different sessions across multiple threads.

Ad Manager
Here’s a pattern than can be use to perform different operations with the same account:

AdManagerSession.Builder builder = new AdManagerSession.Builder()
    .withNetworkCode(networkCode)
    .withCredential(credential)
    .withUserAgent(userAgent);

new FooThread(builder.build()).start();
new BarThread(builder.build()).start();
new BazThread(builder.build()).start();

git clone https://android.googlesource.com/assets/android-studio-ux-assets


https://blockchainnodeengine.googleapis.com

REST Resource: v1.projects.locations

MethodsgetGET /v1/{name=projects/*/locations/*}
Gets information about a location.listGET /v1/{name=projects/*}/locations
Lists information about the supported locations for this service.

REST Resource: v1.projects.locations.blockchainNodes

MethodscreatePOST /v1/{parent=projects/*/locations/*}/blockchainNodes
Creates a new blockchain node in a given project and location.deleteDELETE /v1/{name=projects/*/locations/*/blockchainNodes/*}
Deletes a single blockchain node.getGET /v1/{name=projects/*/locations/*/blockchainNodes/*}
Gets details of a single blockchain node.listGET /v1/{parent=projects/*/locations/*}/blockchainNodes
Lists blockchain nodes in a given project and location.

REST Resource: v1.projects.locations.operations

MethodscancelPOST /v1/{name=projects/*/locations/*/operations/*}:cancel
Starts asynchronous cancellation on a long-running operation.deleteDELETE /v1/{name=projects/*/locations/*/operations/*}
Deletes a long-running operation.getGET /v1/{name=projects/*/locations/*/operations/*}
Gets the latest state of a long-running operation.listGET /v1/{name=projects/*/locations/*}/operations
Lists operations that match the specified filter in the request.

War das hilfreich?

Send feedback

Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.

Last updated 2023-09-02 UTC.

Why Google

Choosing Google Cloud

Trust and security

Open cloud

Multicloud

Global infrastructure

Customers and case studies

Analyst reports

Whitepapers

Blog

Products and pricing

Google Cloud pricing

Google Workspace pricing

See all products

Solutions

Infrastructure modernization

Databases

Application modernization

Smart analytics

Artificial Intelligence

Security

Productivity & work transformation

Industry solutions

DevOps solutions

Small business solutions

See all solutions

Resources

Google Cloud documentation

Google Cloud quickstarts

Google Cloud Marketplace

Learn about cloud computing

Support

Code samples

Cloud Architecture Center

Training

Certifications

Google for Developers

Google Cloud for Startups

System status

Release Notes

Engage

Contact sales

Find a Partner

Become a Partner

Events

Podcasts

Developer Center

Press Corner

Google Cloud on YouTube

Google Cloud Tech on YouTube

Follow on X

Join User Research

We're hiring. Join Google Cloud!

Google Cloud Community

About Google

Privacy

Site terms

Google Cloud terms





4
Firebase SDK hinzufügen
Anleitung für GradleC++
Das Google-Dienste-Plug-in fü

build.gradle-Datei auf Projektebene (<project>/build.gradle):
buildscript {
  repositories {
    // Check that you have the following line (if not, add it):
  
    google()  // Google's Maven repository
  }
  dependencies {
    ...
    // Add this line
  
    classpath 'com.google.gms:google-services:4.3.3'
    ...
  }
}

allprojects {
  ...
  repositories {
    // Check that you have the following line (if not, add it):
  
    google()  // Google's Maven repository
  }
}
build.gradle-Datei auf App-Ebene (<project>/<app-module>/build.gradle):
  
apply plugin: 'com.android.application'
// Add this line
  
apply plugin: 'com.google.gms.google-services'

dependencies {
  // add the Firebase SDK for Google Analytics
  
  implementation 'com.google.firebase:firebase-analytics:17.4.1'
  // add SDKs for any other desired Firebase products
  // https://firebase.google.com/docs/android/setup#available-libraries
}
Wählen Sie abschließend "Jetzt synchronisieren" aus der Leiste aus, die in der IDE erscheint:
Ein Screenshot der Leiste in der IDE, auf der ganz rechts die Schaltfläche „Jetzt synchronisieren“ markiert ist
5
App ausführen, um die Installation zu überprüfen


dependencies {
    // Import the BoM for the Firebase platform
    implementation(platform("com.google.firebase:firebase-bom:32.7.3"))

    // Add the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")
}
Durch die Verwendung der Firebase Android BoM verwendet Ihre App immer kompatible Versionen der Firebase Android-Bibliotheken.

(Alternative)
Fügen Sie Firebase-Bibliotheksabhängigkeiten hinzu
, ohne
die Stückliste zu verwenden

Suchen Sie nach einem Kotlin-spezifischen Bibliotheksmodul? Ab Oktober 2023 (Firebase BoM 32.5.0) können sich sowohl Kotlin- als auch Java-Entwickler auf das Hauptbibliotheksmodul verlassen (Einzelheiten finden Sie in den FAQ zu dieser Initiative ).
Schritt 2 : Fügen Sie das Crashlytics Gradle-Plugin zu Ihrer App hinzu
Fügen Sie in Ihrer Gradle-Datei auf Stammebene (Projektebene) ( <project>/build.gradle.kts oder <project>/build.gradle ) das Crashlytics Gradle-Plugin zum plugins Block hinzu:

Kotlin
Groovy
Verwenden Sie immer noch die buildscript Syntax? Erfahren Sie, wie Sie Firebase-Plugins mithilfe dieser Syntax hinzufügen .

plugins {
    id("com.android.application") version "7.3.0" apply false
    // ...

    // Make sure that you have the Google services Gradle plugin dependency
    id("com.google.gms.google-services") version "4.4.1" apply false

    // Add the dependency for the Crashlytics Gradle plugin
    id("com.google.firebase.crashlytics") version "2.9.9" apply false
}
Fügen Sie in Ihrer Modul-Gradle-Datei (auf App-Ebene) (normalerweise <project>/<app-module>/build.gradle.kts oder <project>/<app-module>/build.gradle ) das Crashlytics Gradle-Plugin hinzu:

Kotlin
Groovy

plugins {
  id("com.android.application")
  // ...

  // Make sure that you have the Google services Gradle plugin
  id("com.google.gms.google-services")

  // Add the Crashlytics Gradle plugin
  id("com.google.firebase.crashlytics")
}
Schritt 3 : Erzwingen Sie einen Testabsturz, um die Einrichtung abzuschließen
Um die Einrichtung von Crashlytics abzuschließen und erste Daten im Crashlytics-Dashboard der Firebase-Konsole anzuzeigen, müssen Sie einen Testabsturz erzwingen.

Fügen Sie Ihrer App Code hinzu, mit dem Sie einen Testabsturz erzwingen können.

Sie können den folgenden Code in MainActivity Ihrer App verwenden, um Ihrer App eine Schaltfläche hinzuzufügen, die beim Drücken einen Absturz verursacht. Die Schaltfläche ist mit „Test Crash“ beschriftet.

Kotlin+KTX
Java

val crashButton = Button(this)
crashButton.text = "Test Crash"
crashButton.setOnClickListener {
   throw RuntimeException("Test Crash") // Force a crash
}

addContentView(crashButton, ViewGroup.LayoutParams(
       ViewGroup.LayoutParams.MATCH_PARENT,
       ViewGroup.LayoutParams.WRAP_CONTENT))


dependencies {
    // Import the BoM for the Firebase platform
    implementation(platform("com.google.firebase:firebase-bom:32.7.3"))

    // Add the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")
}
Durch die Verwendung der Firebase Android BoM verwendet Ihre App immer kompatible Versionen der Firebase Android-Bibliotheken.

(Alternative)
Fügen Sie Firebase-Bibliotheksabhängigkeiten hinzu
, ohne
die Stückliste zu verwenden

Suchen Sie nach einem Kotlin-spezifischen Bibliotheksmodul? Ab Oktober 2023 (Firebase BoM 32.5.0) können sich sowohl Kotlin- als auch Java-Entwickler auf das Hauptbibliotheksmodul verlassen (Einzelheiten finden Sie in den FAQ zu dieser Initiative ).
Schritt 2 : Fügen Sie das Crashlytics Gradle-Plugin zu Ihrer App hinzu
Fügen Sie in Ihrer Gradle-Datei auf Stammebene (Projektebene) ( <project>/build.gradle.kts oder <project>/build.gradle ) das Crashlytics Gradle-Plugin zum plugins Block hinzu:

Kotlin
Groovy
Verwenden Sie immer noch die buildscript Syntax? Erfahren Sie, wie Sie Firebase-Plugins mithilfe dieser Syntax hinzufügen .

plugins {
    id("com.android.application") version "7.3.0" apply false
    // ...

    // Make sure that you have the Google services Gradle plugin dependency
    id("com.google.gms.google-services") version "4.4.1" apply false

    // Add the dependency for the Crashlytics Gradle plugin
    id("com.google.firebase.crashlytics") version "2.9.9" apply false
}
Fügen Sie in Ihrer Modul-Gradle-Datei (auf App-Ebene) (normalerweise <project>/<app-module>/build.gradle.kts oder <project>/<app-module>/build.gradle ) das Crashlytics Gradle-Plugin hinzu:

Kotlin
Groovy

plugins {
  id("com.android.application")
  // ...

  // Make sure that you have the Google services Gradle plugin
  id("com.google.gms.google-services")

  // Add the Crashlytics Gradle plugin
  id("com.google.firebase.crashlytics")
}
Schritt 3 : Erzwingen Sie einen Testabsturz, um die Einrichtung abzuschließen
Um die Einrichtung von Crashlytics abzuschließen und erste Daten im Crashlytics-Dashboard der Firebase-Konsole anzuzeigen, müssen Sie einen Testabsturz erzwingen.

Fügen Sie Ihrer App Code hinzu, mit dem Sie einen Testabsturz erzwingen können.

Sie können den folgenden Code in MainActivity Ihrer App verwenden, um Ihrer App eine Schaltfläche hinzuzufügen, die beim Drücken einen Absturz verursacht. Die Schaltfläche ist mit „Test Crash“ beschriftet.

Kotlin+KTX
Java

val crashButton = Button(this)
crashButton.text = "Test Crash"
crashButton.setOnClickListener {
   throw RuntimeException("Test Crash") // Force a crash
}

addContentView(crashButton, ViewGroup.LayoutParams(
       ViewGroup.LayoutParams.MATCH_PARENT,
      ViewGroup.LayoutParams.WRAP_CONTENT))



...
    implementation "com.android.installreferrer:installreferrer:2.2"
}
Connecting to Google Play
Before you can use the Play Install Referrer API Library, you must establish a connection to the Play Store app using the following steps:

Call the newBuilder() method to create an instance of InstallReferrerClient class.
Call the startConnection() to establish a connection to Google Play.

The startConnection() method is asynchronous, so you must override InstallReferrerStateListener to receive a callback after startConnection() completes.

Override the onInstallReferrerSetupFinished() method to be notified when the callback completes. This method is called with a response code that you must use to handle the different states. OK indicates that the connection was successful. Each of the other InstallReferrerResponse constants are for different types of errors.

Override the onInstallReferrerServiceDisconnected() method to handle lost connections to Google Play. For example, the Play Install Referrer Library client may lose the connection if the Play Store service is updating in the background. The library client must call the startConnection() method to restart the connection before making further requests.

The following code demonstrates how to start and test a connection to the Play Store app:

Kotlin
Java

private lateinit var referrerClient: InstallReferrerClient

referrerClient = InstallReferrerClient.newBuilder(this).build()
referrerClient.startConnection(object : InstallReferrerStateListener {

    override fun onInstallReferrerSetupFinished(responseCode: Int) {
        when (responseCode) {
            InstallReferrerResponse.OK -> {
                // Connection established.
            }
            InstallReferrerResponse.FEATURE_NOT_SUPPORTED -> {
                // API not available on the current Play Store app.
            }
            InstallReferrerResponse.SERVICE_UNAVAILABLE -> {
                // Connection couldn't be established.
            }
        }
    }

    override fun onInstallReferrerServiceDisconnected() {
        // Try to restart the connection on the next request to
        // Google Play by calling the startConnection() method.
    }
})
Getting the install referrer
After you have established a connection to the Play Store app, get the details from the install referrer by completing the following steps:

Use the synchronized getInstallReferrer() method to return an instance of ReferrerDetails.

Use the methods that the ReferrerDetails class provides to get details about the install referrer.

The following code demonstrates how you can access the install referrer information:

Kotlin
Java

val response: ReferrerDetails = referrerClient.installReferrer
val referrerUrl: String = response.installReferrer
val referrerClickTime: Long = response.referrerClickTimestampSeconds
val appInstallTime: Long = response.installBeginTimestampSeconds
val instantExperienceLaunched: Boolean = response.googlePlayInstantParam
Caution: The install referrer information will be available for 90 days and won't change unless the application is reinstalled. To avoid unnecessary API calls in your app, you should invoke the API only once during the first execution after install.

Closing service connection
After getting referrer information, call the endConnection() method on your InstallReferrerClient instance to close the connection. Closing the connection will help you avoid leaks and performance problems.

For further information, refer to the Play Install Referrer Library Reference.


Informationen zur Fehlerbehebung:
  Hauptkonto: tharsanthavarajah777@gmail.com
  Ressource: fir-demo-project
  Fehlerbehebungs-URL: console.cloud.google.com/iam-admin/troubleshooter;permissions=resourcemanager.tagKeys.list;principal=tharsanthavarajah777@gmail.com;resources=%2F%2Fcloudresourcemanager.googleapis.com%2Fprojects%2Ffir-demo-project/result

Fehlende Berechtigungen: resourcemanager.tagKeys.list