mtarget/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
# https://github.com/takari/maven-wrapper#usage-without-binary-jar
.mvn/wrapper/maven-wrapper.jar

# Eclipse m2e generated files
# Eclipse Core
.project
# JDT-specific (Eclipse Java Development Tools)
.classpath

flutterfire configure --project=gold-mode-410402

import 'package:firebase_corefirebase_core.dart';
import 'firebase_options.dart';



flutterfire configure --project=gold-mode-410402

dependencies {
    // Import the BoM for the Firebase platform
    implementation(platform("com.google.firebase:firebase-bom:32.7.1"))

    // Add the dependency for the Firebase Authentication library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-auth")
}
dependencies {
    // Add the dependency for the Firebase Authentication library
    // When NOT using the BoM, you must specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-auth:22.3.1")
}
dependencies {
  // ...

  // Import the Firebase BoM
  implementation(platform("com.google.firebase:firebase-bom:32.7.1"))

  // Using KTX libraries for Authentication and Cloud Firestore
  implementation("com.google.firebase:firebase-auth-ktx")
  implementation("com.google.firebase:firebase-firestore-ktx")
}
dependencies {
  // ...

  // Import the Firebase BoM as usual
  // Make sure to use Firebase BoM v32.5.0 or higher
  implementation(platform("com.google.firebase:firebase-bom:32.7.1"))

  // No need to use the KTX libraries, everything is now in the main module
  implementation("com.google.firebase:firebase-auth")
  implementation("com.google.firebase:firebase-firestore") 
} 

       </ignoreVersions> 
      </rule> 
 
 
     <!-- Apache Beam versions past 2.3.0 cause dataflow/spanner errors. --> 
     <rule groupId="org.apache.beam" artifactId="beam-sdks-java-core" comparisonMethod="maven"> 
       <ignoreVersions> 
         <ignoreVersion type="regex">.*</ignoreVersion> 
       </ignoreVersions> 
     </rule> 
  
      <!-- SendGrid 3 libraries are broken in App Engine standard environment --> 
      <rule groupId="com.sendgrid" artifactId="sendgrid-java" comparisonMethod="maven"> 
        <ignoreVersions>
pip install Flask==3.0.2
$ pip install -U Flask
# save this as app.py
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello, World!"


name: Android CI

on:
  - pull_request
  - push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Check Snippets
      run: python scripts/checksnippets.py
    - name: Install NDK
      run: echo "y" | sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install "ndk;21.0.6113669" --sdk_root=${ANDROID_SDK_ROOT}
    - name: Build with Gradle (Pull Request)
      run: ./build_pull_request.sh
      if: github.event_name == 'pull_request'
    - name: Build with Gradle (Push)
      run: ./gradlew clean ktlint build
      if: github.event_name != 'pull_request'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <application
            android:allowBackup="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/app_name"
            android:supportsRtl="true"
            android:theme="@style/AppTheme">
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>

                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <activity android:name=".kotlin.MainActivity"/>
    </application>

</manifest>

         }); 
          // [END count_aggregate_query] 
      } 
  
     public void orQuery() { 
         CollectionReference collection = db.collection("cities"); 
         // [START or_queries] 
         Query query = collection.where(Filter.and( 
             Filter.equalTo("state", "CA"), 
             Filter.or( 
                 Filter.equalTo("capital", true), 
                 Filter.greaterThanOrEqualTo("population", 1000000) 
             ) 
         )); 
         // [END or_queries] 
     } 
  
     public void orQueryDisjunctions() { 
         CollectionReference collection = db.collection("cities"); 
  
         // [START one_disjunction] 
         collection.whereEqualTo("a", 1); 
         // [END one_disjunction] 
  
         // [START two_disjunctions] 
         collection.where(Filter.or( 
             Filter.equalTo("a", 1), 
             Filter.equalTo("b", 2) 
         )); 
         // [END two_disjunctions] 
  
         // [START four_disjunctions] 
         collection.where(Filter.or( 
             Filter.and( 
                 Filter.equalTo("a", 1), 
                 Filter.equalTo("c", 3) 
             ), 
             Filter.and( 
                 Filter.equalTo("a", 1), 
                 Filter.equalTo("d", 4) 
             ), 
             Filter.and( 
                 Filter.equalTo("b", 2), 
                 Filter.equalTo("c", 3) 
             ), 
             Filter.and( 
                 Filter.equalTo("b", 2), 
                 Filter.equalTo("d", 4) 
             ) 
         )); 
         // [END four_disjunctions] 
  
         // [START four_disjunctions_compact] 
         collection.where(Filter.and( 
             Filter.or( 
                 Filter.equalTo("a", 1), 
                 Filter.equalTo("b", 2) 
             ), 
             Filter.or( 
                 Filter.equalTo("c", 3), 
                 Filter.equalTo("d", 4) 
             ) 
         )); 
         // [END four_disjunctions_compact] 
  
         // [START 20_disjunctions] 
         collection.where(Filter.or( 
             Filter.inArray("a", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 
             Filter.inArray("b", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 
         )); 
         // [END 20_disjunctions] 
  
         // [START 10_disjunctions] 
         collection.where(Filter.and( 
             Filter.inArray("a", Arrays.asList(1, 2, 3, 4, 5)), 
             Filter.or( 
                 Filter.equalTo("b", 2), 
                 Filter.equalTo("c", 3) 
             ) 
         )); 
         // [END 10_disjunctions] 
     } 
  
     public void illegalDisjunctions() { 
         // [START 50_disjunctions] 
         collection.where(Filter.and( 
             Filter.inArray("a", Arrays.asList(1, 2, 3, 4, 5)), 
             Filter.inArray("b", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 
         )); 
         // [END 50_disjunctions]
     }


<!-- Global tag (gtag.js) -->

Das Ende ist:

</script>

# Get `depot_tools` in $PATH if you don't have it
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $HOME/src/depot_tools
export PATH="$PATH:$HOME/src/depot_tools"

# Check out the recipe engine repo
git clone https://chromium.googlesource.com/infra/luci/recipes-py $HOME/src/recipes-py

# make your change
cd $HOME/src/recipes-py
git new-branch cool_feature
# hack hack
git commit -a -m "This is awesome"

# This will ask for your Google Account credentials.
git cl upload -s -r joe@example.com
# Wait for approval over email.
# Click "Submit to CQ" button or ask reviewer to do it for you.
# Wait for the change to be tested and landed automatically.